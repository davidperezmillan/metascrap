#!/usr/bin/env python
# -*- coding: utf-8 -*-
import sys, os, re, glob, shutil
import fnmatch
import logging
from logging.handlers import RotatingFileHandler
import argparse
import conf.constantes as cons

basepathlog = cons.basepathlog
loggername = 'organize'
defaulformatter = "%(asctime)s [%(levelname)s] - %(name)s - %(filename)s:%(lineno)d - %(message)s"
loggerfilename = basepathlog+loggername+'.log'


def buildlogger(args):
    global logger
    logger = logging.getLogger(loggername)
    logger.setLevel(logging.getLevelName(args.loglevel.upper()))
    formatter = logging.Formatter(defaulformatter)
    
    # handler = logging.FileHandler(mcbconstants.basepathlog+"mycrylog.out")
    handler = RotatingFileHandler(args.logfile, maxBytes=20000, backupCount=5)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    ch = logging.StreamHandler()
    ch.setFormatter(formatter)        
    logger.addHandler(ch)
    return logger






class Organize(object):
    
    def proccess(self, url):
        self.logger.info("url peticion {0}".format(url))
        series = glob.glob(os.path.join(url,'*')) 
        series = filter(lambda f: os.path.isdir(f), series)
        for serie in series:
            self.proccess_serie(serie)
    
    def proccess_serie(self,url):
        self.logger.info("url peticion {0}".format(url))
        includes = ['*.avi', '*.mkv','*.mp*'] # for files only
        includes = r'|'.join([fnmatch.translate(x) for x in includes])
        excludes = ['Session'] # for dirs and files
        excludes = r'|'.join([fnmatch.translate(x) for x in excludes]) or r'$.'
        
        
        
        allDepth = glob.glob(os.path.join(url,'*','*'))
        dirsDepth = filter(lambda f: os.path.isdir(f), allDepth)
        for dirDepth in dirsDepth:
            self.logger.debug("directorio {0}".format(dirDepth))
            filesDepth = glob.glob(os.path.join(dirDepth,"*"))
            # filesDepth = filter(lambda f: os.path.isdir(f), filesDepth)
            for fileDepth in filesDepth:
                if re.match(includes, fileDepth):
                    self.logger.info( "fichero {0} a copiar".format(fileDepth))    
                    shutil.copy(fileDepth, dirDepth+'/..')
            if not re.match(excludes, dirDepth):
                self.logger.info( "directorio a borrar {0}".format(dirDepth))
                shutil.rmtree(dirDepth)

    ## Constructor
    def __init__(self, logger= None):
        
        if (logger):
            self.logger = logger
        else:
            self.logger = logging.getLogger(loggername)
            self.logger.setLevel(logging.DEBUG)
            self.formatter = logging.Formatter(defaulformatter)
        
            self.handler = RotatingFileHandler(loggerfilename, maxBytes=2000, backupCount=3)
            self.handler.setFormatter(self.formatter)
            self.logger.addHandler(self.handler)
            
            self.ch = logging.StreamHandler()
            self.ch.setFormatter(self.formatter)        
            self.logger.addHandler(self.ch)



def proccesArgs():
    parser = argparse.ArgumentParser(add_help=True)
    parser.add_argument('modo', choices=['serie', 'lista'], help='Define la operacion a realizar')
    parser.add_argument('url', help='Indica la url a organizar')

    parser.add_argument("-v", "--verbose", help="Mostrar información de depuración", action="store_true")
    parser.add_argument("-t", "--test", help="No ser realizaran acciones [modo test]", action='store_true', default=False)
    parser.add_argument("--cron", help="Se define los parametros para ser lanzado", action="store_true")
    # parser.add_argument("-c", "--config", help="Definimos archivo de configuracion", default="config/config.json")
    parser.add_argument("--loglevel", help="Definimos el nivel de logs", default="INFO", choices=['DEBUG','debug','INFO','info','WARN', 'warn','ERROR', 'error'])
    parser.add_argument("--logfile", help="Definimos archivo de log", default=loggerfilename)
    
    parser.add_argument('--version', action='version', version='%(prog)s 1.0')
    args = parser.parse_args()
    return args




if __name__ == '__main__':
   
    args=proccesArgs()
    logger=buildlogger(args)
    logger.debug("Argumentos pasados %s",args)
    
    
    # root = '/home/ubuntu/workspace/desa/sandbox.6/Code Black'
    # root = '/home/ubuntu/workspace/desa/sandbox.6'
    
    organize = Organize(logger)
    if args.modo == 'serie':
        organize.proccess_serie(args.url)
    if args.modo == 'lista':
        organize.proccess(args.url)
    
    
    

